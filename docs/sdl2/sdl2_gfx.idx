SDL2gfxPrimitivesStd	sdl2/sdl2_gfx.html#SDL2gfxPrimitivesStd	sdl2_gfx: SDL2gfxPrimitivesStd	
SDL2gfxPrimitivesGit	sdl2/sdl2_gfx.html#SDL2gfxPrimitivesGit	sdl2_gfx: SDL2gfxPrimitivesGit	
SDL2gfxPrimitivesDL	sdl2/sdl2_gfx.html#SDL2gfxPrimitivesDL	sdl2_gfx: SDL2gfxPrimitivesDL	
SDL2gfxPrimitivesStatic	sdl2/sdl2_gfx.html#SDL2gfxPrimitivesStatic	sdl2_gfx: SDL2gfxPrimitivesStatic	
SDL2gfxPrimitivesSetVer	sdl2/sdl2_gfx.html#SDL2gfxPrimitivesSetVer	sdl2_gfx: SDL2gfxPrimitivesSetVer	
SDL2gfxPrimitivesLPath	sdl2/sdl2_gfx.html#SDL2gfxPrimitivesLPath	sdl2_gfx: SDL2gfxPrimitivesLPath	
SDL2gfxPrimitivesPath	sdl2/sdl2_gfx.html#SDL2gfxPrimitivesPath	sdl2_gfx: SDL2gfxPrimitivesPath	
SDL2_GFXPRIMITIVES_MAJOR	sdl2/sdl2_gfx.html#SDL2_GFXPRIMITIVES_MAJOR	sdl2_gfx: SDL2_GFXPRIMITIVES_MAJOR	
SDL2_GFXPRIMITIVES_MINOR	sdl2/sdl2_gfx.html#SDL2_GFXPRIMITIVES_MINOR	sdl2_gfx: SDL2_GFXPRIMITIVES_MINOR	
SDL2_GFXPRIMITIVES_MICRO	sdl2/sdl2_gfx.html#SDL2_GFXPRIMITIVES_MICRO	sdl2_gfx: SDL2_GFXPRIMITIVES_MICRO	
pixelColor	sdl2/sdl2_gfx.html#pixelColor,ptr.Renderer,Sint16,Sint16,Uint32	sdl2_gfx: pixelColor(renderer: ptr Renderer; x: Sint16; y: Sint16; color: Uint32): cint	
pixelRGBA	sdl2/sdl2_gfx.html#pixelRGBA,ptr.Renderer,Sint16,Sint16,Uint8,Uint8,Uint8,Uint8	sdl2_gfx: pixelRGBA(renderer: ptr Renderer; x: Sint16; y: Sint16; r: Uint8; g: Uint8; b: Uint8;\n          a: Uint8): cint	
hlineColor	sdl2/sdl2_gfx.html#hlineColor,ptr.Renderer,Sint16,Sint16,Sint16,Uint32	sdl2_gfx: hlineColor(renderer: ptr Renderer; x1: Sint16; x2: Sint16; y: Sint16; color: Uint32): cint	
hlineRGBA	sdl2/sdl2_gfx.html#hlineRGBA,ptr.Renderer,Sint16,Sint16,Sint16,Uint8,Uint8,Uint8,Uint8	sdl2_gfx: hlineRGBA(renderer: ptr Renderer; x1: Sint16; x2: Sint16; y: Sint16; r: Uint8; g: Uint8;\n          b: Uint8; a: Uint8): cint	
vlineColor	sdl2/sdl2_gfx.html#vlineColor,ptr.Renderer,Sint16,Sint16,Sint16,Uint32	sdl2_gfx: vlineColor(renderer: ptr Renderer; x: Sint16; y1: Sint16; y2: Sint16; color: Uint32): cint	
vlineRGBA	sdl2/sdl2_gfx.html#vlineRGBA,ptr.Renderer,Sint16,Sint16,Sint16,Uint8,Uint8,Uint8,Uint8	sdl2_gfx: vlineRGBA(renderer: ptr Renderer; x: Sint16; y1: Sint16; y2: Sint16; r: Uint8; g: Uint8;\n          b: Uint8; a: Uint8): cint	
rectangleColor	sdl2/sdl2_gfx.html#rectangleColor,ptr.Renderer,Sint16,Sint16,Sint16,Sint16,Uint32	sdl2_gfx: rectangleColor(renderer: ptr Renderer; x1: Sint16; y1: Sint16; x2: Sint16; y2: Sint16;\n               color: Uint32): cint	
rectangleRGBA	sdl2/sdl2_gfx.html#rectangleRGBA,ptr.Renderer,Sint16,Sint16,Sint16,Sint16,Uint8,Uint8,Uint8,Uint8	sdl2_gfx: rectangleRGBA(renderer: ptr Renderer; x1: Sint16; y1: Sint16; x2: Sint16; y2: Sint16;\n              r: Uint8; g: Uint8; b: Uint8; a: Uint8): cint	
roundedRectangleColor	sdl2/sdl2_gfx.html#roundedRectangleColor,ptr.Renderer,Sint16,Sint16,Sint16,Sint16,Sint16,Uint32	sdl2_gfx: roundedRectangleColor(renderer: ptr Renderer; x1: Sint16; y1: Sint16; x2: Sint16;\n                      y2: Sint16; rad: Sint16; color: Uint32): cint	
roundedRectangleRGBA	sdl2/sdl2_gfx.html#roundedRectangleRGBA,ptr.Renderer,Sint16,Sint16,Sint16,Sint16,Sint16,Uint8,Uint8,Uint8,Uint8	sdl2_gfx: roundedRectangleRGBA(renderer: ptr Renderer; x1: Sint16; y1: Sint16; x2: Sint16;\n                     y2: Sint16; rad: Sint16; r: Uint8; g: Uint8; b: Uint8; a: Uint8): cint	
boxColor	sdl2/sdl2_gfx.html#boxColor,ptr.Renderer,Sint16,Sint16,Sint16,Sint16,Uint32	sdl2_gfx: boxColor(renderer: ptr Renderer; x1: Sint16; y1: Sint16; x2: Sint16; y2: Sint16;\n         color: Uint32): cint	
boxRGBA	sdl2/sdl2_gfx.html#boxRGBA,ptr.Renderer,Sint16,Sint16,Sint16,Sint16,Uint8,Uint8,Uint8,Uint8	sdl2_gfx: boxRGBA(renderer: ptr Renderer; x1: Sint16; y1: Sint16; x2: Sint16; y2: Sint16; r: Uint8;\n        g: Uint8; b: Uint8; a: Uint8): cint	
roundedBoxColor	sdl2/sdl2_gfx.html#roundedBoxColor,ptr.Renderer,Sint16,Sint16,Sint16,Sint16,Sint16,Uint32	sdl2_gfx: roundedBoxColor(renderer: ptr Renderer; x1: Sint16; y1: Sint16; x2: Sint16; y2: Sint16;\n                rad: Sint16; color: Uint32): cint	
roundedBoxRGBA	sdl2/sdl2_gfx.html#roundedBoxRGBA,ptr.Renderer,Sint16,Sint16,Sint16,Sint16,Sint16,Uint8,Uint8,Uint8,Uint8	sdl2_gfx: roundedBoxRGBA(renderer: ptr Renderer; x1: Sint16; y1: Sint16; x2: Sint16; y2: Sint16;\n               rad: Sint16; r: Uint8; g: Uint8; b: Uint8; a: Uint8): cint	
lineColor	sdl2/sdl2_gfx.html#lineColor,ptr.Renderer,Sint16,Sint16,Sint16,Sint16,Uint32	sdl2_gfx: lineColor(renderer: ptr Renderer; x1: Sint16; y1: Sint16; x2: Sint16; y2: Sint16;\n          color: Uint32): cint	
lineRGBA	sdl2/sdl2_gfx.html#lineRGBA,ptr.Renderer,Sint16,Sint16,Sint16,Sint16,Uint8,Uint8,Uint8,Uint8	sdl2_gfx: lineRGBA(renderer: ptr Renderer; x1: Sint16; y1: Sint16; x2: Sint16; y2: Sint16; r: Uint8;\n         g: Uint8; b: Uint8; a: Uint8): cint	
aalineColor	sdl2/sdl2_gfx.html#aalineColor,ptr.Renderer,Sint16,Sint16,Sint16,Sint16,Uint32	sdl2_gfx: aalineColor(renderer: ptr Renderer; x1: Sint16; y1: Sint16; x2: Sint16; y2: Sint16;\n            color: Uint32): cint	
aalineRGBA	sdl2/sdl2_gfx.html#aalineRGBA,ptr.Renderer,Sint16,Sint16,Sint16,Sint16,Uint8,Uint8,Uint8,Uint8	sdl2_gfx: aalineRGBA(renderer: ptr Renderer; x1: Sint16; y1: Sint16; x2: Sint16; y2: Sint16;\n           r: Uint8; g: Uint8; b: Uint8; a: Uint8): cint	
thickLineColor	sdl2/sdl2_gfx.html#thickLineColor,ptr.Renderer,Sint16,Sint16,Sint16,Sint16,Uint8,Uint32	sdl2_gfx: thickLineColor(renderer: ptr Renderer; x1: Sint16; y1: Sint16; x2: Sint16; y2: Sint16;\n               width: Uint8; color: Uint32): cint	
thickLineRGBA	sdl2/sdl2_gfx.html#thickLineRGBA,ptr.Renderer,Sint16,Sint16,Sint16,Sint16,Uint8,Uint8,Uint8,Uint8,Uint8	sdl2_gfx: thickLineRGBA(renderer: ptr Renderer; x1: Sint16; y1: Sint16; x2: Sint16; y2: Sint16;\n              width: Uint8; r: Uint8; g: Uint8; b: Uint8; a: Uint8): cint	
circleColor	sdl2/sdl2_gfx.html#circleColor,ptr.Renderer,Sint16,Sint16,Sint16,Uint32	sdl2_gfx: circleColor(renderer: ptr Renderer; x: Sint16; y: Sint16; rad: Sint16; color: Uint32): cint	
circleRGBA	sdl2/sdl2_gfx.html#circleRGBA,ptr.Renderer,Sint16,Sint16,Sint16,Uint8,Uint8,Uint8,Uint8	sdl2_gfx: circleRGBA(renderer: ptr Renderer; x: Sint16; y: Sint16; rad: Sint16; r: Uint8; g: Uint8;\n           b: Uint8; a: Uint8): cint	
arcColor	sdl2/sdl2_gfx.html#arcColor,ptr.Renderer,Sint16,Sint16,Sint16,Sint16,Sint16,Uint32	sdl2_gfx: arcColor(renderer: ptr Renderer; x: Sint16; y: Sint16; rad: Sint16; start: Sint16;\n         `end`: Sint16; color: Uint32): cint	
arcRGBA	sdl2/sdl2_gfx.html#arcRGBA,ptr.Renderer,Sint16,Sint16,Sint16,Sint16,Sint16,Uint8,Uint8,Uint8,Uint8	sdl2_gfx: arcRGBA(renderer: ptr Renderer; x: Sint16; y: Sint16; rad: Sint16; start: Sint16;\n        `end`: Sint16; r: Uint8; g: Uint8; b: Uint8; a: Uint8): cint	
aacircleColor	sdl2/sdl2_gfx.html#aacircleColor,ptr.Renderer,Sint16,Sint16,Sint16,Uint32	sdl2_gfx: aacircleColor(renderer: ptr Renderer; x: Sint16; y: Sint16; rad: Sint16; color: Uint32): cint	
aacircleRGBA	sdl2/sdl2_gfx.html#aacircleRGBA,ptr.Renderer,Sint16,Sint16,Sint16,Uint8,Uint8,Uint8,Uint8	sdl2_gfx: aacircleRGBA(renderer: ptr Renderer; x: Sint16; y: Sint16; rad: Sint16; r: Uint8; g: Uint8;\n             b: Uint8; a: Uint8): cint	
filledCircleColor	sdl2/sdl2_gfx.html#filledCircleColor,ptr.Renderer,Sint16,Sint16,Sint16,Uint32	sdl2_gfx: filledCircleColor(renderer: ptr Renderer; x: Sint16; y: Sint16; r: Sint16; color: Uint32): cint	
filledCircleRGBA	sdl2/sdl2_gfx.html#filledCircleRGBA,ptr.Renderer,Sint16,Sint16,Sint16,Uint8,Uint8,Uint8,Uint8	sdl2_gfx: filledCircleRGBA(renderer: ptr Renderer; x: Sint16; y: Sint16; rad: Sint16; r: Uint8;\n                 g: Uint8; b: Uint8; a: Uint8): cint	
ellipseColor	sdl2/sdl2_gfx.html#ellipseColor,ptr.Renderer,Sint16,Sint16,Sint16,Sint16,Uint32	sdl2_gfx: ellipseColor(renderer: ptr Renderer; x: Sint16; y: Sint16; rx: Sint16; ry: Sint16;\n             color: Uint32): cint	
ellipseRGBA	sdl2/sdl2_gfx.html#ellipseRGBA,ptr.Renderer,Sint16,Sint16,Sint16,Sint16,Uint8,Uint8,Uint8,Uint8	sdl2_gfx: ellipseRGBA(renderer: ptr Renderer; x: Sint16; y: Sint16; rx: Sint16; ry: Sint16; r: Uint8;\n            g: Uint8; b: Uint8; a: Uint8): cint	
aaellipseColor	sdl2/sdl2_gfx.html#aaellipseColor,ptr.Renderer,Sint16,Sint16,Sint16,Sint16,Uint32	sdl2_gfx: aaellipseColor(renderer: ptr Renderer; x: Sint16; y: Sint16; rx: Sint16; ry: Sint16;\n               color: Uint32): cint	
aaellipseRGBA	sdl2/sdl2_gfx.html#aaellipseRGBA,ptr.Renderer,Sint16,Sint16,Sint16,Sint16,Uint8,Uint8,Uint8,Uint8	sdl2_gfx: aaellipseRGBA(renderer: ptr Renderer; x: Sint16; y: Sint16; rx: Sint16; ry: Sint16;\n              r: Uint8; g: Uint8; b: Uint8; a: Uint8): cint	
filledEllipseColor	sdl2/sdl2_gfx.html#filledEllipseColor,ptr.Renderer,Sint16,Sint16,Sint16,Sint16,Uint32	sdl2_gfx: filledEllipseColor(renderer: ptr Renderer; x: Sint16; y: Sint16; rx: Sint16; ry: Sint16;\n                   color: Uint32): cint	
filledEllipseRGBA	sdl2/sdl2_gfx.html#filledEllipseRGBA,ptr.Renderer,Sint16,Sint16,Sint16,Sint16,Uint8,Uint8,Uint8,Uint8	sdl2_gfx: filledEllipseRGBA(renderer: ptr Renderer; x: Sint16; y: Sint16; rx: Sint16; ry: Sint16;\n                  r: Uint8; g: Uint8; b: Uint8; a: Uint8): cint	
pieColor	sdl2/sdl2_gfx.html#pieColor,ptr.Renderer,Sint16,Sint16,Sint16,Sint16,Sint16,Uint32	sdl2_gfx: pieColor(renderer: ptr Renderer; x: Sint16; y: Sint16; rad: Sint16; start: Sint16;\n         `end`: Sint16; color: Uint32): cint	
pieRGBA	sdl2/sdl2_gfx.html#pieRGBA,ptr.Renderer,Sint16,Sint16,Sint16,Sint16,Sint16,Uint8,Uint8,Uint8,Uint8	sdl2_gfx: pieRGBA(renderer: ptr Renderer; x: Sint16; y: Sint16; rad: Sint16; start: Sint16;\n        `end`: Sint16; r: Uint8; g: Uint8; b: Uint8; a: Uint8): cint	
filledPieColor	sdl2/sdl2_gfx.html#filledPieColor,ptr.Renderer,Sint16,Sint16,Sint16,Sint16,Sint16,Uint32	sdl2_gfx: filledPieColor(renderer: ptr Renderer; x: Sint16; y: Sint16; rad: Sint16; start: Sint16;\n               `end`: Sint16; color: Uint32): cint	
filledPieRGBA	sdl2/sdl2_gfx.html#filledPieRGBA,ptr.Renderer,Sint16,Sint16,Sint16,Sint16,Sint16,Uint8,Uint8,Uint8,Uint8	sdl2_gfx: filledPieRGBA(renderer: ptr Renderer; x: Sint16; y: Sint16; rad: Sint16; start: Sint16;\n              `end`: Sint16; r: Uint8; g: Uint8; b: Uint8; a: Uint8): cint	
trigonColor	sdl2/sdl2_gfx.html#trigonColor,ptr.Renderer,Sint16,Sint16,Sint16,Sint16,Sint16,Sint16,Uint32	sdl2_gfx: trigonColor(renderer: ptr Renderer; x1: Sint16; y1: Sint16; x2: Sint16; y2: Sint16;\n            x3: Sint16; y3: Sint16; color: Uint32): cint	
trigonRGBA	sdl2/sdl2_gfx.html#trigonRGBA,ptr.Renderer,Sint16,Sint16,Sint16,Sint16,Sint16,Sint16,Uint8,Uint8,Uint8,Uint8	sdl2_gfx: trigonRGBA(renderer: ptr Renderer; x1: Sint16; y1: Sint16; x2: Sint16; y2: Sint16;\n           x3: Sint16; y3: Sint16; r: Uint8; g: Uint8; b: Uint8; a: Uint8): cint	
aatrigonColor	sdl2/sdl2_gfx.html#aatrigonColor,ptr.Renderer,Sint16,Sint16,Sint16,Sint16,Sint16,Sint16,Uint32	sdl2_gfx: aatrigonColor(renderer: ptr Renderer; x1: Sint16; y1: Sint16; x2: Sint16; y2: Sint16;\n              x3: Sint16; y3: Sint16; color: Uint32): cint	
aatrigonRGBA	sdl2/sdl2_gfx.html#aatrigonRGBA,ptr.Renderer,Sint16,Sint16,Sint16,Sint16,Sint16,Sint16,Uint8,Uint8,Uint8,Uint8	sdl2_gfx: aatrigonRGBA(renderer: ptr Renderer; x1: Sint16; y1: Sint16; x2: Sint16; y2: Sint16;\n             x3: Sint16; y3: Sint16; r: Uint8; g: Uint8; b: Uint8; a: Uint8): cint	
filledTrigonColor	sdl2/sdl2_gfx.html#filledTrigonColor,ptr.Renderer,Sint16,Sint16,Sint16,Sint16,Sint16,Sint16,Uint32	sdl2_gfx: filledTrigonColor(renderer: ptr Renderer; x1: Sint16; y1: Sint16; x2: Sint16; y2: Sint16;\n                  x3: Sint16; y3: Sint16; color: Uint32): cint	
filledTrigonRGBA	sdl2/sdl2_gfx.html#filledTrigonRGBA,ptr.Renderer,Sint16,Sint16,Sint16,Sint16,Sint16,Sint16,Uint8,Uint8,Uint8,Uint8	sdl2_gfx: filledTrigonRGBA(renderer: ptr Renderer; x1: Sint16; y1: Sint16; x2: Sint16; y2: Sint16;\n                 x3: Sint16; y3: Sint16; r: Uint8; g: Uint8; b: Uint8; a: Uint8): cint	
polygonColor	sdl2/sdl2_gfx.html#polygonColor,ptr.Renderer,ptr.Sint16,ptr.Sint16,cint,Uint32	sdl2_gfx: polygonColor(renderer: ptr Renderer; vx: ptr Sint16; vy: ptr Sint16; n: cint; color: Uint32): cint	
polygonRGBA	sdl2/sdl2_gfx.html#polygonRGBA,ptr.Renderer,ptr.Sint16,ptr.Sint16,cint,Uint8,Uint8,Uint8,Uint8	sdl2_gfx: polygonRGBA(renderer: ptr Renderer; vx: ptr Sint16; vy: ptr Sint16; n: cint; r: Uint8;\n            g: Uint8; b: Uint8; a: Uint8): cint	
aapolygonColor	sdl2/sdl2_gfx.html#aapolygonColor,ptr.Renderer,ptr.Sint16,ptr.Sint16,cint,Uint32	sdl2_gfx: aapolygonColor(renderer: ptr Renderer; vx: ptr Sint16; vy: ptr Sint16; n: cint;\n               color: Uint32): cint	
aapolygonRGBA	sdl2/sdl2_gfx.html#aapolygonRGBA,ptr.Renderer,ptr.Sint16,ptr.Sint16,cint,Uint8,Uint8,Uint8,Uint8	sdl2_gfx: aapolygonRGBA(renderer: ptr Renderer; vx: ptr Sint16; vy: ptr Sint16; n: cint; r: Uint8;\n              g: Uint8; b: Uint8; a: Uint8): cint	
filledPolygonColor	sdl2/sdl2_gfx.html#filledPolygonColor,ptr.Renderer,ptr.Sint16,ptr.Sint16,cint,Uint32	sdl2_gfx: filledPolygonColor(renderer: ptr Renderer; vx: ptr Sint16; vy: ptr Sint16; n: cint;\n                   color: Uint32): cint	
filledPolygonRGBA	sdl2/sdl2_gfx.html#filledPolygonRGBA,ptr.Renderer,ptr.Sint16,ptr.Sint16,cint,Uint8,Uint8,Uint8,Uint8	sdl2_gfx: filledPolygonRGBA(renderer: ptr Renderer; vx: ptr Sint16; vy: ptr Sint16; n: cint;\n                  r: Uint8; g: Uint8; b: Uint8; a: Uint8): cint	
texturedPolygon	sdl2/sdl2_gfx.html#texturedPolygon,ptr.Renderer,ptr.Sint16,ptr.Sint16,cint,ptr.Surface,cint,cint	sdl2_gfx: texturedPolygon(renderer: ptr Renderer; vx: ptr Sint16; vy: ptr Sint16; n: cint;\n                texture: ptr Surface; textureDx: cint; textureDy: cint): cint	
bezierColor	sdl2/sdl2_gfx.html#bezierColor,ptr.Renderer,ptr.Sint16,ptr.Sint16,cint,cint,Uint32	sdl2_gfx: bezierColor(renderer: ptr Renderer; vx: ptr Sint16; vy: ptr Sint16; n: cint; s: cint;\n            color: Uint32): cint	
bezierRGBA	sdl2/sdl2_gfx.html#bezierRGBA,ptr.Renderer,ptr.Sint16,ptr.Sint16,cint,cint,Uint8,Uint8,Uint8,Uint8	sdl2_gfx: bezierRGBA(renderer: ptr Renderer; vx: ptr Sint16; vy: ptr Sint16; n: cint; s: cint;\n           r: Uint8; g: Uint8; b: Uint8; a: Uint8): cint	
gfxPrimitivesSetFont	sdl2/sdl2_gfx.html#gfxPrimitivesSetFont,pointer,Uint32,Uint32	sdl2_gfx: gfxPrimitivesSetFont(fontdata: pointer; cw: Uint32; ch: Uint32)	
gfxPrimitivesSetFontRotation	sdl2/sdl2_gfx.html#gfxPrimitivesSetFontRotation,Uint32	sdl2_gfx: gfxPrimitivesSetFontRotation(rotation: Uint32)	
characterColor	sdl2/sdl2_gfx.html#characterColor,ptr.Renderer,Sint16,Sint16,cchar,Uint32	sdl2_gfx: characterColor(renderer: ptr Renderer; x: Sint16; y: Sint16; c: cchar; color: Uint32): cint	
characterRGBA	sdl2/sdl2_gfx.html#characterRGBA,ptr.Renderer,Sint16,Sint16,cchar,Uint8,Uint8,Uint8,Uint8	sdl2_gfx: characterRGBA(renderer: ptr Renderer; x: Sint16; y: Sint16; c: cchar; r: Uint8; g: Uint8;\n              b: Uint8; a: Uint8): cint	
stringColor	sdl2/sdl2_gfx.html#stringColor,ptr.Renderer,Sint16,Sint16,cstring,Uint32	sdl2_gfx: stringColor(renderer: ptr Renderer; x: Sint16; y: Sint16; s: cstring; color: Uint32): cint	
stringRGBA	sdl2/sdl2_gfx.html#stringRGBA,ptr.Renderer,Sint16,Sint16,cstring,Uint8,Uint8,Uint8,Uint8	sdl2_gfx: stringRGBA(renderer: ptr Renderer; x: Sint16; y: Sint16; s: cstring; r: Uint8; g: Uint8;\n           b: Uint8; a: Uint8): cint	
SMOOTHING_OFF	sdl2/sdl2_gfx.html#SMOOTHING_OFF	sdl2_gfx: SMOOTHING_OFF	
SMOOTHING_ON	sdl2/sdl2_gfx.html#SMOOTHING_ON	sdl2_gfx: SMOOTHING_ON	
rotozoomSurface	sdl2/sdl2_gfx.html#rotozoomSurface,ptr.Surface,cdouble,cdouble,cint	sdl2_gfx: rotozoomSurface(src: ptr Surface; angle: cdouble; zoom: cdouble; smooth: cint): ptr Surface	
rotozoomSurfaceXY	sdl2/sdl2_gfx.html#rotozoomSurfaceXY,ptr.Surface,cdouble,cdouble,cdouble,cint	sdl2_gfx: rotozoomSurfaceXY(src: ptr Surface; angle: cdouble; zoomx: cdouble; zoomy: cdouble;\n                  smooth: cint): ptr Surface	
rotozoomSurfaceSize	sdl2/sdl2_gfx.html#rotozoomSurfaceSize,cint,cint,cdouble,cdouble,ptr.cint,ptr.cint	sdl2_gfx: rotozoomSurfaceSize(width: cint; height: cint; angle: cdouble; zoom: cdouble;\n                    dstwidth: ptr cint; dstheight: ptr cint)	
rotozoomSurfaceSizeXY	sdl2/sdl2_gfx.html#rotozoomSurfaceSizeXY,cint,cint,cdouble,cdouble,cdouble,ptr.cint,ptr.cint	sdl2_gfx: rotozoomSurfaceSizeXY(width: cint; height: cint; angle: cdouble; zoomx: cdouble;\n                      zoomy: cdouble; dstwidth: ptr cint; dstheight: ptr cint)	
zoomSurface	sdl2/sdl2_gfx.html#zoomSurface,ptr.Surface,cdouble,cdouble,cint	sdl2_gfx: zoomSurface(src: ptr Surface; zoomx: cdouble; zoomy: cdouble; smooth: cint): ptr Surface	
zoomSurfaceSize	sdl2/sdl2_gfx.html#zoomSurfaceSize,cint,cint,cdouble,cdouble,ptr.cint,ptr.cint	sdl2_gfx: zoomSurfaceSize(width: cint; height: cint; zoomx: cdouble; zoomy: cdouble;\n                dstwidth: ptr cint; dstheight: ptr cint)	
shrinkSurface	sdl2/sdl2_gfx.html#shrinkSurface,ptr.Surface,cint,cint	sdl2_gfx: shrinkSurface(src: ptr Surface; factorx: cint; factory: cint): ptr Surface	
rotateSurface90Degrees	sdl2/sdl2_gfx.html#rotateSurface90Degrees,ptr.Surface,cint	sdl2_gfx: rotateSurface90Degrees(src: ptr Surface; numClockwiseTurns: cint): ptr Surface	
FPS_UPPER_LIMIT	sdl2/sdl2_gfx.html#FPS_UPPER_LIMIT	sdl2_gfx: FPS_UPPER_LIMIT	
FPS_LOWER_LIMIT	sdl2/sdl2_gfx.html#FPS_LOWER_LIMIT	sdl2_gfx: FPS_LOWER_LIMIT	
FPS_DEFAULT	sdl2/sdl2_gfx.html#FPS_DEFAULT	sdl2_gfx: FPS_DEFAULT	
FPSmanager	sdl2/sdl2_gfx.html#FPSmanager	sdl2_gfx: FPSmanager	
initFramerate	sdl2/sdl2_gfx.html#initFramerate,ptr.FPSmanager	sdl2_gfx: initFramerate(manager: ptr FPSmanager)	
setFramerate	sdl2/sdl2_gfx.html#setFramerate,ptr.FPSmanager,Uint32	sdl2_gfx: setFramerate(manager: ptr FPSmanager; rate: Uint32): cint	
getFramerate	sdl2/sdl2_gfx.html#getFramerate,ptr.FPSmanager	sdl2_gfx: getFramerate(manager: ptr FPSmanager): cint	
getFramecount	sdl2/sdl2_gfx.html#getFramecount,ptr.FPSmanager	sdl2_gfx: getFramecount(manager: ptr FPSmanager): cint	
framerateDelay	sdl2/sdl2_gfx.html#framerateDelay,ptr.FPSmanager	sdl2_gfx: framerateDelay(manager: ptr FPSmanager): Uint32	
imageFilterMMXdetect	sdl2/sdl2_gfx.html#imageFilterMMXdetect	sdl2_gfx: imageFilterMMXdetect(): cint	
imageFilterMMXoff	sdl2/sdl2_gfx.html#imageFilterMMXoff	sdl2_gfx: imageFilterMMXoff()	
imageFilterMMXon	sdl2/sdl2_gfx.html#imageFilterMMXon	sdl2_gfx: imageFilterMMXon()	
imageFilterAdd	sdl2/sdl2_gfx.html#imageFilterAdd,ptr.cuchar,ptr.cuchar,ptr.cuchar,cuint	sdl2_gfx: imageFilterAdd(Src1: ptr cuchar; Src2: ptr cuchar; Dest: ptr cuchar; length: cuint): cint	
imageFilterMean	sdl2/sdl2_gfx.html#imageFilterMean,ptr.cuchar,ptr.cuchar,ptr.cuchar,cuint	sdl2_gfx: imageFilterMean(Src1: ptr cuchar; Src2: ptr cuchar; Dest: ptr cuchar; length: cuint): cint	
imageFilterSub	sdl2/sdl2_gfx.html#imageFilterSub,ptr.cuchar,ptr.cuchar,ptr.cuchar,cuint	sdl2_gfx: imageFilterSub(Src1: ptr cuchar; Src2: ptr cuchar; Dest: ptr cuchar; length: cuint): cint	
imageFilterAbsDiff	sdl2/sdl2_gfx.html#imageFilterAbsDiff,ptr.cuchar,ptr.cuchar,ptr.cuchar,cuint	sdl2_gfx: imageFilterAbsDiff(Src1: ptr cuchar; Src2: ptr cuchar; Dest: ptr cuchar; length: cuint): cint	
imageFilterMult	sdl2/sdl2_gfx.html#imageFilterMult,ptr.cuchar,ptr.cuchar,ptr.cuchar,cuint	sdl2_gfx: imageFilterMult(Src1: ptr cuchar; Src2: ptr cuchar; Dest: ptr cuchar; length: cuint): cint	
imageFilterMultNor	sdl2/sdl2_gfx.html#imageFilterMultNor,ptr.cuchar,ptr.cuchar,ptr.cuchar,cuint	sdl2_gfx: imageFilterMultNor(Src1: ptr cuchar; Src2: ptr cuchar; Dest: ptr cuchar; length: cuint): cint	
imageFilterMultDivby2	sdl2/sdl2_gfx.html#imageFilterMultDivby2,ptr.cuchar,ptr.cuchar,ptr.cuchar,cuint	sdl2_gfx: imageFilterMultDivby2(Src1: ptr cuchar; Src2: ptr cuchar; Dest: ptr cuchar; length: cuint): cint	
imageFilterMultDivby4	sdl2/sdl2_gfx.html#imageFilterMultDivby4,ptr.cuchar,ptr.cuchar,ptr.cuchar,cuint	sdl2_gfx: imageFilterMultDivby4(Src1: ptr cuchar; Src2: ptr cuchar; Dest: ptr cuchar; length: cuint): cint	
imageFilterBitAnd	sdl2/sdl2_gfx.html#imageFilterBitAnd,ptr.cuchar,ptr.cuchar,ptr.cuchar,cuint	sdl2_gfx: imageFilterBitAnd(Src1: ptr cuchar; Src2: ptr cuchar; Dest: ptr cuchar; length: cuint): cint	
imageFilterBitOr	sdl2/sdl2_gfx.html#imageFilterBitOr,ptr.cuchar,ptr.cuchar,ptr.cuchar,cuint	sdl2_gfx: imageFilterBitOr(Src1: ptr cuchar; Src2: ptr cuchar; Dest: ptr cuchar; length: cuint): cint	
imageFilterDiv	sdl2/sdl2_gfx.html#imageFilterDiv,ptr.cuchar,ptr.cuchar,ptr.cuchar,cuint	sdl2_gfx: imageFilterDiv(Src1: ptr cuchar; Src2: ptr cuchar; Dest: ptr cuchar; length: cuint): cint	
imageFilterBitNegation	sdl2/sdl2_gfx.html#imageFilterBitNegation,ptr.cuchar,ptr.cuchar,cuint	sdl2_gfx: imageFilterBitNegation(Src1: ptr cuchar; Dest: ptr cuchar; length: cuint): cint	
imageFilterAddByte	sdl2/sdl2_gfx.html#imageFilterAddByte,ptr.cuchar,ptr.cuchar,cuint,cuchar	sdl2_gfx: imageFilterAddByte(Src1: ptr cuchar; Dest: ptr cuchar; length: cuint; C: cuchar): cint	
imageFilterAddUint	sdl2/sdl2_gfx.html#imageFilterAddUint,ptr.cuchar,ptr.cuchar,cuint,cuint	sdl2_gfx: imageFilterAddUint(Src1: ptr cuchar; Dest: ptr cuchar; length: cuint; C: cuint): cint	
imageFilterAddByteToHalf	sdl2/sdl2_gfx.html#imageFilterAddByteToHalf,ptr.cuchar,ptr.cuchar,cuint,cuchar	sdl2_gfx: imageFilterAddByteToHalf(Src1: ptr cuchar; Dest: ptr cuchar; length: cuint; C: cuchar): cint	
imageFilterSubByte	sdl2/sdl2_gfx.html#imageFilterSubByte,ptr.cuchar,ptr.cuchar,cuint,cuchar	sdl2_gfx: imageFilterSubByte(Src1: ptr cuchar; Dest: ptr cuchar; length: cuint; C: cuchar): cint	
imageFilterSubUint	sdl2/sdl2_gfx.html#imageFilterSubUint,ptr.cuchar,ptr.cuchar,cuint,cuint	sdl2_gfx: imageFilterSubUint(Src1: ptr cuchar; Dest: ptr cuchar; length: cuint; C: cuint): cint	
imageFilterShiftRight	sdl2/sdl2_gfx.html#imageFilterShiftRight,ptr.cuchar,ptr.cuchar,cuint,cuchar	sdl2_gfx: imageFilterShiftRight(Src1: ptr cuchar; Dest: ptr cuchar; length: cuint; N: cuchar): cint	
imageFilterShiftRightUint	sdl2/sdl2_gfx.html#imageFilterShiftRightUint,ptr.cuchar,ptr.cuchar,cuint,cuchar	sdl2_gfx: imageFilterShiftRightUint(Src1: ptr cuchar; Dest: ptr cuchar; length: cuint; N: cuchar): cint	
imageFilterMultByByte	sdl2/sdl2_gfx.html#imageFilterMultByByte,ptr.cuchar,ptr.cuchar,cuint,cuchar	sdl2_gfx: imageFilterMultByByte(Src1: ptr cuchar; Dest: ptr cuchar; length: cuint; C: cuchar): cint	
imageFilterShiftRightAndMultByByte	sdl2/sdl2_gfx.html#imageFilterShiftRightAndMultByByte,ptr.cuchar,ptr.cuchar,cuint,cuchar,cuchar	sdl2_gfx: imageFilterShiftRightAndMultByByte(Src1: ptr cuchar; Dest: ptr cuchar; length: cuint;\n                                   N: cuchar; C: cuchar): cint	
imageFilterShiftLeftByte	sdl2/sdl2_gfx.html#imageFilterShiftLeftByte,ptr.cuchar,ptr.cuchar,cuint,cuchar	sdl2_gfx: imageFilterShiftLeftByte(Src1: ptr cuchar; Dest: ptr cuchar; length: cuint; N: cuchar): cint	
imageFilterShiftLeftUint	sdl2/sdl2_gfx.html#imageFilterShiftLeftUint,ptr.cuchar,ptr.cuchar,cuint,cuchar	sdl2_gfx: imageFilterShiftLeftUint(Src1: ptr cuchar; Dest: ptr cuchar; length: cuint; N: cuchar): cint	
imageFilterShiftLeft	sdl2/sdl2_gfx.html#imageFilterShiftLeft,ptr.cuchar,ptr.cuchar,cuint,cuchar	sdl2_gfx: imageFilterShiftLeft(Src1: ptr cuchar; Dest: ptr cuchar; length: cuint; N: cuchar): cint	
imageFilterBinarizeUsingThreshold	sdl2/sdl2_gfx.html#imageFilterBinarizeUsingThreshold,ptr.cuchar,ptr.cuchar,cuint,cuchar	sdl2_gfx: imageFilterBinarizeUsingThreshold(Src1: ptr cuchar; Dest: ptr cuchar; length: cuint;\n                                  T: cuchar): cint	
imageFilterClipToRange	sdl2/sdl2_gfx.html#imageFilterClipToRange,ptr.cuchar,ptr.cuchar,cuint,cuchar,cuchar	sdl2_gfx: imageFilterClipToRange(Src1: ptr cuchar; Dest: ptr cuchar; length: cuint; Tmin: cuchar;\n                       Tmax: cuchar): cint	
imageFilterNormalizeLinear	sdl2/sdl2_gfx.html#imageFilterNormalizeLinear,ptr.cuchar,ptr.cuchar,cuint,cint,cint,cint,cint	sdl2_gfx: imageFilterNormalizeLinear(Src: ptr cuchar; Dest: ptr cuchar; length: cuint; Cmin: cint;\n                           Cmax: cint; Nmin: cint; Nmax: cint): cint	
